import java.util.*;

import static java.lang.Math.max;
import static java.lang.Math.min;

class TicTac1
{
    private static int ai;

    public static void main(String[] args)
    {
        char[][] board;
        board = new char[][]{{' ',' ',' '},{' ',' ',' '},{' ',' ',' '}};
        printboard(board);
        Scanner sr=new Scanner(System.in);
        System.out.println(" Enter the placement from 1-9");
        int pos=sr.nextInt();
        insert(board,pos,'X');
        int h = bestMove(board);
        insert(board,h,'O');
        int d;
        d = checkwin( board);
        if(d==1) System.out.println("player wins");
        if(d==0) System.out.println("comp wins");
        else System.out.println("its a tie");
    }
    public static void printboard(char[][] board)
    {
        for(char[] row:board){
            for(char c:row)
                System.out.print(c);
            System.out.println();
        }
    }
    public static void insert(char[][] board,int pos, char user)
    {
        char sym=' ';
        if(user=='X')
            sym='X';
        else if(user=='O')
            sym='O';

        switch(pos){
            case 1:
                board[0][0]=sym;
            case 2:
                board[0][1]=sym;
            case 3:
                board[0][2]=sym;
            case 4:
                board[1][0]=sym;
            case 5:
                board[1][1]=sym;
            case 6:
                board[1][2]=sym;
            case 7:
                board[2][0]=sym;
            case 8:
                board[2][1]=sym;
            case 9:
                board[2][2]=sym;
            default:
                break;
        }
    }
    public static int checkwin(char[]... board)
    {
        if((board[0][0] + board[0][1] + board[0][2] == 'X') ||
                (board[1][0] + board[1][1] + board[1][2] == 'X') ||
                (board[2][0] + board[2][1] + board[2][2] == 'X') ||
                (board[0][0] + board[1][0] + board[2][0] == 'X') ||
                (board[0][1] + board[1][1] + board[2][1] == 'X') ||
                (board[0][2] + board[1][2] + board[2][2] == 'X') ||
                (board[0][0] + board[1][1] + board[2][2] == 'X') ||
                (board[2][0] + board[1][1] + board[0][2] == 'X'))
            return 1;
        if((board[0][0] + board[0][1] + board[0][2] == 'O') ||
                (board[1][0] + board[1][1] + board[1][2] == 'O') ||
                (board[2][0] + board[2][1] + board[2][2] == 'O') ||
                (board[0][0] + board[1][0] + board[2][0] == 'O') ||
                (board[0][1] + board[1][1] + board[2][1] == 'O') ||
                (board[0][2] + board[1][2] + board[2][2] == 'O') ||
                (board[0][0] + board[1][1] + board[2][2] == 'O') ||
                (board[2][0] + board[1][1] + board[0][2] == 'O'))
            return 0;
        else
            return -1;
    }
    public static int bestMove(char[][] board) {
        int bestScore = -100;
        int ai = Integer.parseInt(null);
        int f = 0;
        int k =0;
        // Is the spot available?
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (board[ i ][ j ] == ' ') {
                    board[ i ][ j ] = ai;
                    int score = minimax(board, false);
                    board[ i ][ j ] = ' ';
                    if (score > bestScore) {
                        bestScore = score;
                        f = i;
                        k = j;
                    }
                }
        ai=board[f][k];
        return ai;

    }

    public static int minimax(char[][] board, Boolean isMaximizing)
    {
        int result =checkwin(board);
        if ( (result ==0) ||(result==1)||(result==-1))
            return result;

        if (isMaximizing) {
            int bestScore = -100;
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                    if (board[ i ][ j ] == ' ') {
                        board[ i ][ j ] = 'O';
                        int score = minimax(board, false);
                        board[ i ][ j ] = ' ';
                        bestScore = max(score, bestScore);
                    }
            return bestScore;
        }
        else
        {
            int bestScore = 100;
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                    if (board[ i ][ j ] == ' ') {
                        board[ i ][ j ] = 'X';
                        int score = minimax(board, true);
                        board[ i ][ j ] = ' ';
                        bestScore = min(score, bestScore);
                    }
            return bestScore;
        }

    }
}
